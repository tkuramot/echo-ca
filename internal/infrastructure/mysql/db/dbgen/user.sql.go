// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package dbgen

import (
	"context"
)

const upsertUser = `-- name: UpsertUser :exec
INSERT INTO
    users (
    id,
    email,
    nickname,
    created_at,
    updated_at
)
VALUES
    (
        ?,
        ?,
        ?,
        NOW(),
        NOW()
    ) ON DUPLICATE KEY
UPDATE
    email = ?,
    nickname = ?,
    updated_at = NOW()
`

type UpsertUserParams struct {
	ID       string `json:"id"`
	Email    string `json:"email"`
	Nickname string `json:"nickname"`
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) error {
	_, err := q.db.ExecContext(ctx, upsertUser,
		arg.ID,
		arg.Email,
		arg.Nickname,
		arg.Email,
		arg.Nickname,
	)
	return err
}

const userFindAll = `-- name: UserFindAll :many
SELECT
    id, email, nickname, created_at, updated_at
FROM
    users
`

func (q *Queries) UserFindAll(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, userFindAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Nickname,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userFindById = `-- name: UserFindById :one
SELECT
    id, email, nickname, created_at, updated_at
FROM
    users
WHERE
    id = ?
`

func (q *Queries) UserFindById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, userFindById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Nickname,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
