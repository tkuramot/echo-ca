// Code generated by MockGen. DO NOT EDIT.
// Source: task_repository.go
//
// Generated by this command:
//
//	mockgen -package task -source task_repository.go -destination mock_task_repository.go
//

// Package task is a generated GoMock package.
package task

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockRepository) FindAll(ctx context.Context, userID string) ([]*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, userID)
	ret0, _ := ret[0].([]*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRepositoryMockRecorder) FindAll(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRepository)(nil).FindAll), ctx, userID)
}

// FindByID mocks base method.
func (m *MockRepository) FindByID(ctx context.Context, taskID string) (*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, taskID)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockRepositoryMockRecorder) FindByID(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockRepository)(nil).FindByID), ctx, taskID)
}

// FindByStatus mocks base method.
func (m *MockRepository) FindByStatus(ctx context.Context, userID string, status Status) ([]*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByStatus", ctx, userID, status)
	ret0, _ := ret[0].([]*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByStatus indicates an expected call of FindByStatus.
func (mr *MockRepositoryMockRecorder) FindByStatus(ctx, userID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByStatus", reflect.TypeOf((*MockRepository)(nil).FindByStatus), ctx, userID, status)
}

// Save mocks base method.
func (m *MockRepository) Save(ctx context.Context, userID string, task *Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, userID, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(ctx, userID, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), ctx, userID, task)
}

// UpdateStatus mocks base method.
func (m *MockRepository) UpdateStatus(ctx context.Context, taskID string, status Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, taskID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockRepositoryMockRecorder) UpdateStatus(ctx, taskID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockRepository)(nil).UpdateStatus), ctx, taskID, status)
}
